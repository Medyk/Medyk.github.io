{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nerdoza Studio","title":"Nerdoza Studio"},{"location":"#nerdoza-studio","text":"","title":"Nerdoza Studio"},{"location":"2022-11-12-wireguard/","text":"2022.11.12 - Wireguard Intro Przetestowa\u0142em konfiguracj\u0119 WireGuard\u2019a z moj\u0105 aktualn\u0105 sieci\u0105 (UPC w domu, njumobile w pracowni - dodatkowe NATowanie po stronie Orange, wi\u0119c brak mo\u017cliwo\u015bci wystawienia czegokolwiek na \u015bwiat) Przyj\u0119ta adresacja # Sie\u0107 Si\u0119\u0107 domowa - 192.168.0.0/24 Sie\u0107 pracowni - 192.168.3.0/24 Sie\u0107 WireGuard - 172.27.0.0/24 # Hosty UPC - 192.168.0.1 Komp - 192.168.0.7 RPI2 - 192.168.0.9 / 172.27.0.4 pfSense - 192.168.3.1 / 172.27.0.3 RandomServer - 192.168.3.253 Konfiguracja RasperryPi Instalacja WireGuard na RPi2 jest prosta bo idzie z pakiet\u00f3w apt install raspberrypi-kernel-headers apt-get install wireguard wireguard-tools Po instalacji trzeba zrestartowa\u0107 Pi sudo reboot (przynajmniej tak by\u0142o w moim przypadku) Po restarcie dodanie nowego interfejsu powinno zadzia\u0142a\u0107 ip link add dev wg0 type wireguard Konfiguracj\u0119 najlepiej zrobi\u0107 toolsami ( wg albo wg-quick ) $ wg --help Usage: wg <cmd> [<args>] Available subcommands: show: Shows the current configuration and device information showconf: Shows the current configuration of a given WireGuard interface, for use with `setconf' set: Change the current configuration, add peers, remove peers, or change peers setconf: Applies a configuration file to a WireGuard interface addconf: Appends a configuration file to a WireGuard interface syncconf: Synchronizes a configuration file to a WireGuard interface genkey: Generates a new private key and writes it to stdout genpsk: Generates a new preshared key and writes it to stdout pubkey: Reads a private key from stdin and writes a public key to stdout Dokumentacja opisuj\u0105ca struktur\u0119 pliku conf jest pod linkiem https://git.zx2c4.com/wireguard-tools/about/src/man/wg-quick.8 ( wg-quick ma wi\u0119cej opcji w conf ni\u017c wg - jest komenda wg-quick strip ) Generowanie kluczy prywatnych i publicznych genkey > private pubkey < private Utworzy\u0142em plik w /etc/wireguard/wg0.conf dla wg-quick # home network [Interface] Address = 172.27.0.4/24 MTU = 1400 FwMark = 0x7767 PrivateKey = <server-private-key> ListenPort = 51820 # workshop network [Peer] PublicKey = <client-public-key> PresharedKey = <client-preshared-key> AllowedIPs = 172.27.0.0/24,192.168.3.0/24 PersistentKeepalive = 25 Keepalive jest potrzebny do utrzymania NATu po stronie njumobile Uruchomienie tunelu wg-quick up wg0 Aktualizacja ustawie\u0144 wg syncconf wg0 <(wg-quick strip wg0) Na routerze UPC dorzucony port-forwarding. Konfiguracja pfSense Trzeba doinstalowa\u0107 pakiet Nast\u0119pnie dodajemy tunel Przypisujemy interfejs (u mnie OPT2 ) Ustawiamy IP (u mnie 172.27.0.3/24 ) Dodatkowo MTU ustawi\u0142em na 1400 - info w necie https://gist.github.com/nitred/f16850ca48c48c79bf422e90ee5b9d95 Tworzymy regu\u0142y FW - nie wiem czy potrzeba ale doda\u0142em takie same regu\u0142y dla OPT2 Dodajemy Gateway Oraz tras\u0119 statyczn\u0105 do mojego kompa Na ko\u0144cu doda\u0142em Peer\u2019a dla WG z dozwolonymi sieciami Po chwili pracownia pod\u0142\u0105czy\u0142a si\u0119 do sieci domowej Status po stronie PIVPN $ wg interface: wg0 public key: <cut> private key: (hidden) listening port: <cut> fwmark: 0x7767 peer: <cut> preshared key: (hidden) endpoint: <cut> allowed ips: 172.27.0.0/24, 192.168.3.0/24 latest handshake: 1 minute, 26 seconds ago transfer: 22.35 MiB received, 8.16 MiB sent persistent keepalive: every 25 seconds Test po\u0142\u0105czenia Na PIVPN doda\u0142em tras\u0119 do jednego hosta $ sudo route add -host 192.168.3.253 metric 0 dev wg0 $ route Kernel IP routing table Destination Gateway Genmask Flags Metric Ref Use Iface ... 192.168.3.253 0.0.0.0 255.255.255.255 UH 0 0 0 wg0 ... Na komputerze domowym doda\u0142em route\u2019a via RPi route -p ADD 172.27.0.0 MASK 255.255.255.0 192.168.0.9 METRIC 95 Z sieci domowej wida\u0107 hosta WG po stronie pracowni # komputer domowy PS C:\\Projects> ping 172.27.0.3 Pinging 172.27.0.3 with 32 bytes of data: Reply from 172.27.0.3: bytes=32 time=64ms TTL=63 Reply from 172.27.0.3: bytes=32 time=63ms TTL=63 Reply from 172.27.0.3: bytes=32 time=59ms TTL=63 Reply from 172.27.0.3: bytes=32 time=72ms TTL=63 Ping statistics for 172.27.0.3: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 59ms, Maximum = 72ms, Average = 64ms Pingowanie i wej\u015bcie na HTTPS odk\u0142ada si\u0119 do log\u00f3w prawid\u0142owo Komunikacja z PIVPN te\u017c wygl\u0105da dobrze # pivpn root@pivpn:~# traceroute -4 -T 192.168.3.253 traceroute to 192.168.3.253 (192.168.3.253), 30 hops max, 60 byte packets 1 172.27.0.3 (172.27.0.3) 158.550 ms 158.371 ms 166.330 ms 2 192.168.3.253 (192.168.3.253) 166.135 ms 165.975 ms 166.307 ms root@pivpn:~# traceroute -4 -T -i wg0 192.168.3.253 traceroute to 192.168.3.253 (192.168.3.253), 30 hops max, 60 byte packets 1 172.27.0.3 (172.27.0.3) 59.417 ms 66.819 ms 72.106 ms 2 192.168.3.253 (192.168.3.253) 71.728 ms 71.502 ms 71.789 ms root@pivpn:~# traceroute -4 -T -i tun0 192.168.3.253 traceroute to 192.168.3.253 (192.168.3.253), 30 hops max, 60 byte packets 1 10.15.5.2 (10.15.5.2) 59.213 ms 66.880 ms 66.885 ms 2 192.168.3.253 (192.168.3.253) 66.944 ms 68.757 ms 68.930 ms Czy dzia\u0142a niezawodnie dowiem si\u0119 jak wy\u0142\u0105cz\u0119 ovpn \ud83d\ude00 Linki https://www.wireguard.com/quickstart/ https://www.howtogeek.com/657780/how-to-use-the-traceroute-command-on-linux/ https://www.howtogeek.com/howto/windows/adding-a-tcpip-route-to-the-windows-routing-table/ https://git.zx2c4.com/wireguard-tools/about/src/man/wg.8 https://git.zx2c4.com/wireguard-tools/about/src/man/wg-quick.8","title":"2022.11.12 - Wireguard"},{"location":"2022-11-12-wireguard/#20221112-wireguard","text":"","title":"2022.11.12 - Wireguard"},{"location":"2022-11-12-wireguard/#intro","text":"Przetestowa\u0142em konfiguracj\u0119 WireGuard\u2019a z moj\u0105 aktualn\u0105 sieci\u0105 (UPC w domu, njumobile w pracowni - dodatkowe NATowanie po stronie Orange, wi\u0119c brak mo\u017cliwo\u015bci wystawienia czegokolwiek na \u015bwiat) Przyj\u0119ta adresacja # Sie\u0107 Si\u0119\u0107 domowa - 192.168.0.0/24 Sie\u0107 pracowni - 192.168.3.0/24 Sie\u0107 WireGuard - 172.27.0.0/24 # Hosty UPC - 192.168.0.1 Komp - 192.168.0.7 RPI2 - 192.168.0.9 / 172.27.0.4 pfSense - 192.168.3.1 / 172.27.0.3 RandomServer - 192.168.3.253","title":"Intro"},{"location":"2022-11-12-wireguard/#konfiguracja-rasperrypi","text":"Instalacja WireGuard na RPi2 jest prosta bo idzie z pakiet\u00f3w apt install raspberrypi-kernel-headers apt-get install wireguard wireguard-tools Po instalacji trzeba zrestartowa\u0107 Pi sudo reboot (przynajmniej tak by\u0142o w moim przypadku) Po restarcie dodanie nowego interfejsu powinno zadzia\u0142a\u0107 ip link add dev wg0 type wireguard Konfiguracj\u0119 najlepiej zrobi\u0107 toolsami ( wg albo wg-quick ) $ wg --help Usage: wg <cmd> [<args>] Available subcommands: show: Shows the current configuration and device information showconf: Shows the current configuration of a given WireGuard interface, for use with `setconf' set: Change the current configuration, add peers, remove peers, or change peers setconf: Applies a configuration file to a WireGuard interface addconf: Appends a configuration file to a WireGuard interface syncconf: Synchronizes a configuration file to a WireGuard interface genkey: Generates a new private key and writes it to stdout genpsk: Generates a new preshared key and writes it to stdout pubkey: Reads a private key from stdin and writes a public key to stdout Dokumentacja opisuj\u0105ca struktur\u0119 pliku conf jest pod linkiem https://git.zx2c4.com/wireguard-tools/about/src/man/wg-quick.8 ( wg-quick ma wi\u0119cej opcji w conf ni\u017c wg - jest komenda wg-quick strip ) Generowanie kluczy prywatnych i publicznych genkey > private pubkey < private Utworzy\u0142em plik w /etc/wireguard/wg0.conf dla wg-quick # home network [Interface] Address = 172.27.0.4/24 MTU = 1400 FwMark = 0x7767 PrivateKey = <server-private-key> ListenPort = 51820 # workshop network [Peer] PublicKey = <client-public-key> PresharedKey = <client-preshared-key> AllowedIPs = 172.27.0.0/24,192.168.3.0/24 PersistentKeepalive = 25 Keepalive jest potrzebny do utrzymania NATu po stronie njumobile Uruchomienie tunelu wg-quick up wg0 Aktualizacja ustawie\u0144 wg syncconf wg0 <(wg-quick strip wg0) Na routerze UPC dorzucony port-forwarding.","title":"Konfiguracja RasperryPi"},{"location":"2022-11-12-wireguard/#konfiguracja-pfsense","text":"Trzeba doinstalowa\u0107 pakiet Nast\u0119pnie dodajemy tunel Przypisujemy interfejs (u mnie OPT2 ) Ustawiamy IP (u mnie 172.27.0.3/24 ) Dodatkowo MTU ustawi\u0142em na 1400 - info w necie https://gist.github.com/nitred/f16850ca48c48c79bf422e90ee5b9d95 Tworzymy regu\u0142y FW - nie wiem czy potrzeba ale doda\u0142em takie same regu\u0142y dla OPT2 Dodajemy Gateway Oraz tras\u0119 statyczn\u0105 do mojego kompa Na ko\u0144cu doda\u0142em Peer\u2019a dla WG z dozwolonymi sieciami Po chwili pracownia pod\u0142\u0105czy\u0142a si\u0119 do sieci domowej Status po stronie PIVPN $ wg interface: wg0 public key: <cut> private key: (hidden) listening port: <cut> fwmark: 0x7767 peer: <cut> preshared key: (hidden) endpoint: <cut> allowed ips: 172.27.0.0/24, 192.168.3.0/24 latest handshake: 1 minute, 26 seconds ago transfer: 22.35 MiB received, 8.16 MiB sent persistent keepalive: every 25 seconds","title":"Konfiguracja pfSense"},{"location":"2022-11-12-wireguard/#test-poaczenia","text":"Na PIVPN doda\u0142em tras\u0119 do jednego hosta $ sudo route add -host 192.168.3.253 metric 0 dev wg0 $ route Kernel IP routing table Destination Gateway Genmask Flags Metric Ref Use Iface ... 192.168.3.253 0.0.0.0 255.255.255.255 UH 0 0 0 wg0 ... Na komputerze domowym doda\u0142em route\u2019a via RPi route -p ADD 172.27.0.0 MASK 255.255.255.0 192.168.0.9 METRIC 95 Z sieci domowej wida\u0107 hosta WG po stronie pracowni # komputer domowy PS C:\\Projects> ping 172.27.0.3 Pinging 172.27.0.3 with 32 bytes of data: Reply from 172.27.0.3: bytes=32 time=64ms TTL=63 Reply from 172.27.0.3: bytes=32 time=63ms TTL=63 Reply from 172.27.0.3: bytes=32 time=59ms TTL=63 Reply from 172.27.0.3: bytes=32 time=72ms TTL=63 Ping statistics for 172.27.0.3: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 59ms, Maximum = 72ms, Average = 64ms Pingowanie i wej\u015bcie na HTTPS odk\u0142ada si\u0119 do log\u00f3w prawid\u0142owo Komunikacja z PIVPN te\u017c wygl\u0105da dobrze # pivpn root@pivpn:~# traceroute -4 -T 192.168.3.253 traceroute to 192.168.3.253 (192.168.3.253), 30 hops max, 60 byte packets 1 172.27.0.3 (172.27.0.3) 158.550 ms 158.371 ms 166.330 ms 2 192.168.3.253 (192.168.3.253) 166.135 ms 165.975 ms 166.307 ms root@pivpn:~# traceroute -4 -T -i wg0 192.168.3.253 traceroute to 192.168.3.253 (192.168.3.253), 30 hops max, 60 byte packets 1 172.27.0.3 (172.27.0.3) 59.417 ms 66.819 ms 72.106 ms 2 192.168.3.253 (192.168.3.253) 71.728 ms 71.502 ms 71.789 ms root@pivpn:~# traceroute -4 -T -i tun0 192.168.3.253 traceroute to 192.168.3.253 (192.168.3.253), 30 hops max, 60 byte packets 1 10.15.5.2 (10.15.5.2) 59.213 ms 66.880 ms 66.885 ms 2 192.168.3.253 (192.168.3.253) 66.944 ms 68.757 ms 68.930 ms Czy dzia\u0142a niezawodnie dowiem si\u0119 jak wy\u0142\u0105cz\u0119 ovpn \ud83d\ude00","title":"Test po\u0142\u0105czenia"},{"location":"2022-11-12-wireguard/#linki","text":"https://www.wireguard.com/quickstart/ https://www.howtogeek.com/657780/how-to-use-the-traceroute-command-on-linux/ https://www.howtogeek.com/howto/windows/adding-a-tcpip-route-to-the-windows-routing-table/ https://git.zx2c4.com/wireguard-tools/about/src/man/wg.8 https://git.zx2c4.com/wireguard-tools/about/src/man/wg-quick.8","title":"Linki"},{"location":"2022-12-25-ssh-certificates/","text":"2022.12.25 - SSH Certificates Intro Ostatnio pracuj\u0119 nad zestawieniem HomeLab/2, a przerwa \u015bwi\u0105teczna pozwala pobawi\u0107 si\u0119 nowymi tematami. Mo\u017ce nie a\u017c tak nowymi bo z 2020 roku, ale nadal ma\u0142o popularnymi. Przygotowanie CA Pierwszym krokiem jest przygotowanie CA do podpisywania kluczy publicznych host\u00f3w i user\u00f3w. Mo\u017ce by\u0107 jeden wsp\u00f3lny, mo\u017ce by\u0107 kilka dedytkowanych. Nowe CA mo\u017cna wygenerowa\u0107 przy pomocy ssh-keygen # generate new CA ssh-keygen -t rsa -b 4096 -f trusted_user_ca -C 'SSH Validation CA' Na razie u\u017cywam pfSense do zarz\u0105dzania certami, wi\u0119c nowe subCA tam wygenerowa\u0142em. Po \u015bci\u0105gni\u0119ciu certa i klucza prywatnego nale\u017ca\u0142o je przekonwertowa\u0107 na format zrozumia\u0142y dla ssh-keygen . # convert openssl to openssh openssl x509 -inform pem -in nerdoza-studio-ssh-ca.crt -noout -pubkey > nerdoza-studio-ssh-ca.pubkey ssh-keygen -i -f nerdoza-studio-ssh-ca.pubkey -m PKCS8 > nerdoza-studio-ssh-ca.pub Konfiguracja serwera Podpisanie kluczy publicznych serwera \u017beby podpisa\u0107 klucze publiczne musimy mie\u0107 pod r\u0119k\u0105 klucz prywatny CA. Oczywi\u015bcie poszed\u0142em po linii najmniejszego oporu i po prostu wrzuci\u0142em CA.pub i CA.key bezpo\u015brenio na serwer docelowy do /etc/ssh \ud83d\ude42 Klucz publiczny musi by\u0107 w formacie OpenSSL (zaczyna\u0107 si\u0119 np. od ssh-rsa ) # sign public keys ssh-keygen -s nerdoza-studio-ssh-ca.key -I serwer.nerdoza.studio -h -n serwer.nerdoza.studio -V -5m:+3650d ssh_host_rsa_key.pub https://www.man7.org/linux/man-pages/man1/ssh-keygen.1.html -s - podpisanie klucza prywatnego wybranym kluczem CA ( CA.key ) -I - ustawienie to\u017csamo\u015bci podpisywanego klucza -h - utworzenie certyfikatu hosta zamiast certyfikatu usera -n - lista principals\u00f3w (nazwa hosta) -V - okres wa\u017cno\u015bci certyfikatu (5min wstecz, 10lat do przodu) Operacje wykona\u0142em dla ka\u017cdego typu klucza: rsa , ecdsa i ed25519 . W odpowiedzi dosta\u0142em potwierdzenie utworzenia certyfikatu. Signed host key serwer-cert.pub: id \"serwer.nerdoza.studio\" serial 0 for serwer.nerdoza.studio valid from 2022-12-26T19:32:27 to 2032-12-23T19:37:27 # view certificate ssh-keygen -Lf serwer-cert.pub serwer-cert.pub Konfiguracja sshd \u017beby skorzysta\u0107 z cert\u00f3w po stronie serwera nale\u017cy doda\u0107 nast\u0119puj\u0105ce opcje do sshd_config . HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub HostCertificate /etc/ssh/ssh_host_ecdsa_key-cert.pub HostCertificate /etc/ssh/ssh_host_ed25519_key-cert.pub PubkeyAuthentication yes # Accept user certs signed by this CA TrustedUserCAKeys /etc/ssh/nerdoza-studio-ssh-ca.pub # RevokedKeys /etc/ssh/revoked_keys Na koniec trzeba zrestartowa\u0107 sshd systemctl restart sshd Lista odwo\u0142anych kluczy czyli KRL SSH przyjmuje dwa rodzaje pliku z odwo\u0142anymi kluczami - plik tekstowy albo plik binarny: RevokedKeys Specifies revoked public keys file, or none to not use one. Keys listed in this file will be refused for public key authentication. Note that if this file is not readable, then public key authentication will be refused for all users. Keys may be specified as a text file, listing one public key per line, or as an OpenSSH Key Revocation List (KRL) as generated by ssh-keygen(1). For more information on KRLs, see the KEY REVOCATION LISTS section in ssh-keygen(1). Dla pliku tekstowego wystarczy wpisa\u0107 po jednym kluczu per linia ssh-rsa AAAAB... ssh-rsa AAAAB... W przypadku pliku binarnego trzeba nim zarz\u0105dza\u0107 przez ssh-keygen. https://www.man7.org/linux/man-pages/man1/ssh-keygen.1.html#KEY_REVOCATION_LISTS Opcji jest kilka - odwo\u0142anie przez serial number, public key albo hash to te kt\u00f3re mnie interesowa\u0142y. Hash mo\u017cna wyci\u0105gn\u0105\u0107 z /var/log/auth.log # cat revoke.txt hash: SHA256:XXXXXXXXXXXXXXXXXX # create new KRL ssh-keygen -k -f /etc/ssh/revoked_keys revoke.txt # update KRL ssh-keygen -k -u -f /etc/ssh/revoked_keys revoke.txt Na razie nie u\u017cywam KRL, ale konfiguracj\u0119 mam przygotowan\u0105. # !!! IMPORTANT - file must be readable or SSH will deny all users !!! touch /etc/ssh/revoked_keys # uncomment in sshd_config RevokedKeys /etc/ssh/revoked_keys Na koniec mo\u017cna prze\u0142\u0105czy\u0107 niekt\u00f3re opcje sshd . PasswordAuthentication no # restrict pubkeys to certs only - PubkeyAcceptedKeyTypes or PubkeyAcceptedAlgorithms depending on sshd version PubkeyAcceptedKeyTypes ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com Akceptacja certyfikatu hosta przez klienta Konfiguracja ssh Dodajemy CA.pub do known_hosts @cert-authority *.nerdoza.studio ssh-rsa AAAAB... Konfiguracja Putty Tutaj jest wi\u0119cej zabawy i dodatkowo potrzeba Putty w wersji 0.78+ Wybieramy Configure host CAs Ustawiamy nazw\u0119, \u0142adujemy zawarto\u015b\u0107 z pliku, dodajemy list\u0119 host\u00f3w (analogicznie do known_hosts ) W rejestrze pojawi\u0105 si\u0119 nowe wpisy Konfiguracja klienta Podpisanie klucza Klucz podpisujemy analogicznie do podpisu serwera jednak bez opcji -h . # sign public key ssh-keygen -s ssh-ca.key -I myuser@myhost -n myuser -V -5m:+3650d myid_rsa.pub -n - lista principals\u00f3w (domy\u015blnie nazwy u\u017cytkownik\u00f3w, kt\u00f3rymi loguje si\u0119 klient, je\u015bli serwer nie ma ustawionej opcji AuthorizedPrincipalsFile) https://man.openbsd.org/sshd_config.5#AuthorizedPrincipalsFile Konfiguracja ssh Dodajemy wpisy do pliku ~/.ssh/config . Dodatkowo ustawi\u0142em list\u0119 u\u017cywanych algorytm\u00f3w algorytm\u00f3w (tylko certy). https://man.openbsd.org/ssh_config#PubkeyAcceptedAlgorithms Host myhost IdentitiesOnly yes IdentityFile ~/.ssh/myid_rsa PubkeyAcceptedAlgorithms ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com User myuser Weryfikujemy po\u0142\u0105czenie przez dodanie -v do komendy ssh . (...) debug1: Reading configuration data C:\\\\Users\\\\#####/.ssh/config debug1: C:\\\\Users\\\\#####/.ssh/config line 4: Applying options for serwer.nerdoza.studio debug1: C:\\\\Users\\\\#####/.ssh/config line 7: Applying options for * debug1: Connecting to serwer.nerdoza.studio [192.*.*.*] port 22. debug1: Connection established. debug1: identity file C:\\\\Users\\\\#####/.ssh/mykey_rsa type 0 debug1: identity file C:\\\\Users\\\\#####/.ssh/mykey_rsa-cert type 4 debug1: Authenticating to serwer.nerdoza.studio:22 as '#####' debug1: Server host certificate: ssh-ed25519-cert-v01@openssh.com SHA256:#####, serial 0 ID \"serwer.nerdoza.studio\" CA ssh-rsa SHA256:##### valid from 2022-12-26T02:22:00 to 2032-12-23T02:23:17 debug1: Host 'serwer.nerdoza.studio' is known and matches the ED25519-CERT host certificate. debug1: Found CA key in C:\\\\Users\\\\#####/.ssh/known_hosts:1 debug1: Skipping ssh-rsa key C:\\\\Users\\\\#####/.ssh/mykey_rsa - corresponding algo not in PubkeyAcceptedAlgorithms debug1: Will attempt key: C:\\\\Users\\\\#####/.ssh/mykey_rsa RSA-CERT SHA256:##### explicit debug1: Authentications that can continue: publickey debug1: Next authentication method: publickey debug1: Offering public key: C:\\\\Users\\\\#####/.ssh/mykey_rsa RSA-CERT SHA256:##### explicit debug1: Server accepts key: C:\\\\Users\\\\#####/.ssh/mykey_rsa RSA-CERT SHA256:##### explicit debug1: Authentication succeeded (publickey). Authenticated to serwer.nerdoza.studio ([192.*.*.*]:22). (...) Konfiguracja Putty Najpierw nale\u017cy przekonwertowa\u0107 klucz prywatny do postaci PPK. https://gcore.com/support/articles/360012640597/ Nast\u0119pnie konfiguracj\u0119 w Putty ustawiam per sesj\u0119. Podczas po\u0142\u0105czenia wyskakuje monit o has\u0142o do klucza prywatnego (PPK). U\u017cycie cert\u00f3w mo\u017cemy zweryfikowa\u0107 w logu Puttiego (w\u0142\u0105czamy przez Session \u2192 Logging) (...) Incoming packet #0x2, type 21 / 0x15 (SSH2_MSG_NEWKEYS) Event Log: Server also has ssh-ed25519/ecdsa-sha2-nistp256/rsa-sha2-512/rsa-sha2-256/ssh-rsa/ecdsa-sha2-nistp256-cert-v01@openssh.com/rsa-sha2-512-cert-v01@openssh.com/rsa-sha2-256-cert-v01@openssh.com/ssh-rsa-cert-v01@openssh.com host keys, but we don't know any of them Event Log: Host key fingerprint is: Event Log: ssh-ed25519-cert-v01@openssh.com 255 SHA256:##### Event Log: Host key is a certificate. Hash including certificate: Event Log: ssh-ed25519-cert-v01@openssh.com 255 SHA256:##### Event Log: Certificate ID string is \"serwer.nerdoza.studio\" Event Log: Fingerprint of certification authority: Event Log: ssh-rsa 4096 SHA256:##### Event Log: Certification authority matches 'nerdoza-studio-ssh-ca' Event Log: Accepted certificate Outgoing packet #0x2, type 21 / 0x15 (SSH2_MSG_NEWKEYS) (...) Incoming packet #0x4, type 6 / 0x06 (SSH2_MSG_SERVICE_ACCEPT) Event Log: Reading key file \"C:\\Users\\#####\\.ssh\\mykey_rsa.ppk\" Event Log: Reading certificate file \"C:\\Users\\#####\\.ssh\\mykey_rsa-cert.pub\" Outgoing packet #0x4, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST) Incoming packet #0x5, type 51 / 0x33 (SSH2_MSG_USERAUTH_FAILURE) Event Log: Sending public key with certificate from \"C:\\Users\\#####\\.ssh\\mykey_rsa-cert.pub\" Event Log: Offered public key Outgoing packet #0x5, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST) Incoming packet #0x6, type 60 / 0x3c (SSH2_MSG_USERAUTH_PK_OK) Event Log: Offer of public key accepted Event Log: Sent public key signature Outgoing packet #0x6, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST) Incoming packet #0x7, type 52 / 0x34 (SSH2_MSG_USERAUTH_SUCCESS) Event Log: Access granted Event Log: Opening main session channel (...) Linki https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Certificate-based_Authentication https://goteleport.com/blog/how-to-configure-ssh-certificate-based-authentication/ https://www.lorier.net/docs/ssh-ca.html https://www.man7.org/linux/man-pages/man1/ssh-keygen.1.html#KEY_REVOCATION_LISTS https://the.earth.li/~sgtatham/putty/0.78/htmldoc/Chapter4.html#config-ssh-auth-creds https://sleeplessbeastie.eu/2020/02/17/how-to-revoke-specific-key-used-to-login-with-openssh/ https://www.youtube.com/watch?v=lYzklWPTbsQ","title":"2022.12.25 - SSH Certificates"},{"location":"2022-12-25-ssh-certificates/#20221225-ssh-certificates","text":"","title":"2022.12.25 - SSH Certificates"},{"location":"2022-12-25-ssh-certificates/#intro","text":"Ostatnio pracuj\u0119 nad zestawieniem HomeLab/2, a przerwa \u015bwi\u0105teczna pozwala pobawi\u0107 si\u0119 nowymi tematami. Mo\u017ce nie a\u017c tak nowymi bo z 2020 roku, ale nadal ma\u0142o popularnymi.","title":"Intro"},{"location":"2022-12-25-ssh-certificates/#przygotowanie-ca","text":"Pierwszym krokiem jest przygotowanie CA do podpisywania kluczy publicznych host\u00f3w i user\u00f3w. Mo\u017ce by\u0107 jeden wsp\u00f3lny, mo\u017ce by\u0107 kilka dedytkowanych. Nowe CA mo\u017cna wygenerowa\u0107 przy pomocy ssh-keygen # generate new CA ssh-keygen -t rsa -b 4096 -f trusted_user_ca -C 'SSH Validation CA' Na razie u\u017cywam pfSense do zarz\u0105dzania certami, wi\u0119c nowe subCA tam wygenerowa\u0142em. Po \u015bci\u0105gni\u0119ciu certa i klucza prywatnego nale\u017ca\u0142o je przekonwertowa\u0107 na format zrozumia\u0142y dla ssh-keygen . # convert openssl to openssh openssl x509 -inform pem -in nerdoza-studio-ssh-ca.crt -noout -pubkey > nerdoza-studio-ssh-ca.pubkey ssh-keygen -i -f nerdoza-studio-ssh-ca.pubkey -m PKCS8 > nerdoza-studio-ssh-ca.pub","title":"Przygotowanie CA"},{"location":"2022-12-25-ssh-certificates/#konfiguracja-serwera","text":"","title":"Konfiguracja serwera"},{"location":"2022-12-25-ssh-certificates/#podpisanie-kluczy-publicznych-serwera","text":"\u017beby podpisa\u0107 klucze publiczne musimy mie\u0107 pod r\u0119k\u0105 klucz prywatny CA. Oczywi\u015bcie poszed\u0142em po linii najmniejszego oporu i po prostu wrzuci\u0142em CA.pub i CA.key bezpo\u015brenio na serwer docelowy do /etc/ssh \ud83d\ude42 Klucz publiczny musi by\u0107 w formacie OpenSSL (zaczyna\u0107 si\u0119 np. od ssh-rsa ) # sign public keys ssh-keygen -s nerdoza-studio-ssh-ca.key -I serwer.nerdoza.studio -h -n serwer.nerdoza.studio -V -5m:+3650d ssh_host_rsa_key.pub https://www.man7.org/linux/man-pages/man1/ssh-keygen.1.html -s - podpisanie klucza prywatnego wybranym kluczem CA ( CA.key ) -I - ustawienie to\u017csamo\u015bci podpisywanego klucza -h - utworzenie certyfikatu hosta zamiast certyfikatu usera -n - lista principals\u00f3w (nazwa hosta) -V - okres wa\u017cno\u015bci certyfikatu (5min wstecz, 10lat do przodu) Operacje wykona\u0142em dla ka\u017cdego typu klucza: rsa , ecdsa i ed25519 . W odpowiedzi dosta\u0142em potwierdzenie utworzenia certyfikatu. Signed host key serwer-cert.pub: id \"serwer.nerdoza.studio\" serial 0 for serwer.nerdoza.studio valid from 2022-12-26T19:32:27 to 2032-12-23T19:37:27 # view certificate ssh-keygen -Lf serwer-cert.pub serwer-cert.pub","title":"Podpisanie kluczy publicznych serwera"},{"location":"2022-12-25-ssh-certificates/#konfiguracja-sshd","text":"\u017beby skorzysta\u0107 z cert\u00f3w po stronie serwera nale\u017cy doda\u0107 nast\u0119puj\u0105ce opcje do sshd_config . HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub HostCertificate /etc/ssh/ssh_host_ecdsa_key-cert.pub HostCertificate /etc/ssh/ssh_host_ed25519_key-cert.pub PubkeyAuthentication yes # Accept user certs signed by this CA TrustedUserCAKeys /etc/ssh/nerdoza-studio-ssh-ca.pub # RevokedKeys /etc/ssh/revoked_keys Na koniec trzeba zrestartowa\u0107 sshd systemctl restart sshd","title":"Konfiguracja sshd"},{"location":"2022-12-25-ssh-certificates/#lista-odwoanych-kluczy-czyli-krl","text":"SSH przyjmuje dwa rodzaje pliku z odwo\u0142anymi kluczami - plik tekstowy albo plik binarny: RevokedKeys Specifies revoked public keys file, or none to not use one. Keys listed in this file will be refused for public key authentication. Note that if this file is not readable, then public key authentication will be refused for all users. Keys may be specified as a text file, listing one public key per line, or as an OpenSSH Key Revocation List (KRL) as generated by ssh-keygen(1). For more information on KRLs, see the KEY REVOCATION LISTS section in ssh-keygen(1). Dla pliku tekstowego wystarczy wpisa\u0107 po jednym kluczu per linia ssh-rsa AAAAB... ssh-rsa AAAAB... W przypadku pliku binarnego trzeba nim zarz\u0105dza\u0107 przez ssh-keygen. https://www.man7.org/linux/man-pages/man1/ssh-keygen.1.html#KEY_REVOCATION_LISTS Opcji jest kilka - odwo\u0142anie przez serial number, public key albo hash to te kt\u00f3re mnie interesowa\u0142y. Hash mo\u017cna wyci\u0105gn\u0105\u0107 z /var/log/auth.log # cat revoke.txt hash: SHA256:XXXXXXXXXXXXXXXXXX # create new KRL ssh-keygen -k -f /etc/ssh/revoked_keys revoke.txt # update KRL ssh-keygen -k -u -f /etc/ssh/revoked_keys revoke.txt Na razie nie u\u017cywam KRL, ale konfiguracj\u0119 mam przygotowan\u0105. # !!! IMPORTANT - file must be readable or SSH will deny all users !!! touch /etc/ssh/revoked_keys # uncomment in sshd_config RevokedKeys /etc/ssh/revoked_keys Na koniec mo\u017cna prze\u0142\u0105czy\u0107 niekt\u00f3re opcje sshd . PasswordAuthentication no # restrict pubkeys to certs only - PubkeyAcceptedKeyTypes or PubkeyAcceptedAlgorithms depending on sshd version PubkeyAcceptedKeyTypes ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com","title":"Lista odwo\u0142anych kluczy czyli KRL"},{"location":"2022-12-25-ssh-certificates/#akceptacja-certyfikatu-hosta-przez-klienta","text":"","title":"Akceptacja certyfikatu hosta przez klienta"},{"location":"2022-12-25-ssh-certificates/#konfiguracja-ssh","text":"Dodajemy CA.pub do known_hosts @cert-authority *.nerdoza.studio ssh-rsa AAAAB...","title":"Konfiguracja ssh"},{"location":"2022-12-25-ssh-certificates/#konfiguracja-putty","text":"Tutaj jest wi\u0119cej zabawy i dodatkowo potrzeba Putty w wersji 0.78+ Wybieramy Configure host CAs Ustawiamy nazw\u0119, \u0142adujemy zawarto\u015b\u0107 z pliku, dodajemy list\u0119 host\u00f3w (analogicznie do known_hosts ) W rejestrze pojawi\u0105 si\u0119 nowe wpisy","title":"Konfiguracja Putty"},{"location":"2022-12-25-ssh-certificates/#konfiguracja-klienta","text":"","title":"Konfiguracja klienta"},{"location":"2022-12-25-ssh-certificates/#podpisanie-klucza","text":"Klucz podpisujemy analogicznie do podpisu serwera jednak bez opcji -h . # sign public key ssh-keygen -s ssh-ca.key -I myuser@myhost -n myuser -V -5m:+3650d myid_rsa.pub -n - lista principals\u00f3w (domy\u015blnie nazwy u\u017cytkownik\u00f3w, kt\u00f3rymi loguje si\u0119 klient, je\u015bli serwer nie ma ustawionej opcji AuthorizedPrincipalsFile) https://man.openbsd.org/sshd_config.5#AuthorizedPrincipalsFile","title":"Podpisanie klucza"},{"location":"2022-12-25-ssh-certificates/#konfiguracja-ssh_1","text":"Dodajemy wpisy do pliku ~/.ssh/config . Dodatkowo ustawi\u0142em list\u0119 u\u017cywanych algorytm\u00f3w algorytm\u00f3w (tylko certy). https://man.openbsd.org/ssh_config#PubkeyAcceptedAlgorithms Host myhost IdentitiesOnly yes IdentityFile ~/.ssh/myid_rsa PubkeyAcceptedAlgorithms ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com User myuser Weryfikujemy po\u0142\u0105czenie przez dodanie -v do komendy ssh . (...) debug1: Reading configuration data C:\\\\Users\\\\#####/.ssh/config debug1: C:\\\\Users\\\\#####/.ssh/config line 4: Applying options for serwer.nerdoza.studio debug1: C:\\\\Users\\\\#####/.ssh/config line 7: Applying options for * debug1: Connecting to serwer.nerdoza.studio [192.*.*.*] port 22. debug1: Connection established. debug1: identity file C:\\\\Users\\\\#####/.ssh/mykey_rsa type 0 debug1: identity file C:\\\\Users\\\\#####/.ssh/mykey_rsa-cert type 4 debug1: Authenticating to serwer.nerdoza.studio:22 as '#####' debug1: Server host certificate: ssh-ed25519-cert-v01@openssh.com SHA256:#####, serial 0 ID \"serwer.nerdoza.studio\" CA ssh-rsa SHA256:##### valid from 2022-12-26T02:22:00 to 2032-12-23T02:23:17 debug1: Host 'serwer.nerdoza.studio' is known and matches the ED25519-CERT host certificate. debug1: Found CA key in C:\\\\Users\\\\#####/.ssh/known_hosts:1 debug1: Skipping ssh-rsa key C:\\\\Users\\\\#####/.ssh/mykey_rsa - corresponding algo not in PubkeyAcceptedAlgorithms debug1: Will attempt key: C:\\\\Users\\\\#####/.ssh/mykey_rsa RSA-CERT SHA256:##### explicit debug1: Authentications that can continue: publickey debug1: Next authentication method: publickey debug1: Offering public key: C:\\\\Users\\\\#####/.ssh/mykey_rsa RSA-CERT SHA256:##### explicit debug1: Server accepts key: C:\\\\Users\\\\#####/.ssh/mykey_rsa RSA-CERT SHA256:##### explicit debug1: Authentication succeeded (publickey). Authenticated to serwer.nerdoza.studio ([192.*.*.*]:22). (...)","title":"Konfiguracja ssh"},{"location":"2022-12-25-ssh-certificates/#konfiguracja-putty_1","text":"Najpierw nale\u017cy przekonwertowa\u0107 klucz prywatny do postaci PPK. https://gcore.com/support/articles/360012640597/ Nast\u0119pnie konfiguracj\u0119 w Putty ustawiam per sesj\u0119. Podczas po\u0142\u0105czenia wyskakuje monit o has\u0142o do klucza prywatnego (PPK). U\u017cycie cert\u00f3w mo\u017cemy zweryfikowa\u0107 w logu Puttiego (w\u0142\u0105czamy przez Session \u2192 Logging) (...) Incoming packet #0x2, type 21 / 0x15 (SSH2_MSG_NEWKEYS) Event Log: Server also has ssh-ed25519/ecdsa-sha2-nistp256/rsa-sha2-512/rsa-sha2-256/ssh-rsa/ecdsa-sha2-nistp256-cert-v01@openssh.com/rsa-sha2-512-cert-v01@openssh.com/rsa-sha2-256-cert-v01@openssh.com/ssh-rsa-cert-v01@openssh.com host keys, but we don't know any of them Event Log: Host key fingerprint is: Event Log: ssh-ed25519-cert-v01@openssh.com 255 SHA256:##### Event Log: Host key is a certificate. Hash including certificate: Event Log: ssh-ed25519-cert-v01@openssh.com 255 SHA256:##### Event Log: Certificate ID string is \"serwer.nerdoza.studio\" Event Log: Fingerprint of certification authority: Event Log: ssh-rsa 4096 SHA256:##### Event Log: Certification authority matches 'nerdoza-studio-ssh-ca' Event Log: Accepted certificate Outgoing packet #0x2, type 21 / 0x15 (SSH2_MSG_NEWKEYS) (...) Incoming packet #0x4, type 6 / 0x06 (SSH2_MSG_SERVICE_ACCEPT) Event Log: Reading key file \"C:\\Users\\#####\\.ssh\\mykey_rsa.ppk\" Event Log: Reading certificate file \"C:\\Users\\#####\\.ssh\\mykey_rsa-cert.pub\" Outgoing packet #0x4, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST) Incoming packet #0x5, type 51 / 0x33 (SSH2_MSG_USERAUTH_FAILURE) Event Log: Sending public key with certificate from \"C:\\Users\\#####\\.ssh\\mykey_rsa-cert.pub\" Event Log: Offered public key Outgoing packet #0x5, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST) Incoming packet #0x6, type 60 / 0x3c (SSH2_MSG_USERAUTH_PK_OK) Event Log: Offer of public key accepted Event Log: Sent public key signature Outgoing packet #0x6, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST) Incoming packet #0x7, type 52 / 0x34 (SSH2_MSG_USERAUTH_SUCCESS) Event Log: Access granted Event Log: Opening main session channel (...)","title":"Konfiguracja Putty"},{"location":"2022-12-25-ssh-certificates/#linki","text":"https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Certificate-based_Authentication https://goteleport.com/blog/how-to-configure-ssh-certificate-based-authentication/ https://www.lorier.net/docs/ssh-ca.html https://www.man7.org/linux/man-pages/man1/ssh-keygen.1.html#KEY_REVOCATION_LISTS https://the.earth.li/~sgtatham/putty/0.78/htmldoc/Chapter4.html#config-ssh-auth-creds https://sleeplessbeastie.eu/2020/02/17/how-to-revoke-specific-key-used-to-login-with-openssh/ https://www.youtube.com/watch?v=lYzklWPTbsQ","title":"Linki"}]}